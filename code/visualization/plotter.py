'''
    plotter.py

    visualises one of the .csv files in the results folder that
    have been generated by the main.py code.
'''
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import scipy.stats as stats
from brian2.units.stdunits import mV, ms, mS, uA, nA, namp

def plot_dynamicclamp(statemon, g_exc, g_inh, hiddenstate, dt):
    '''Plots the injected conductance and voltage trace.
    '''
    fig, axs = plt.subplots(3, figsize=(12,12))
    fig.suptitle('Dynamic Clamp')
    axs[0].plot(statemon.t/ms, g_exc(statemon.t)/mS, c='red')
    axs[0].set(ylabel='Exc. conductance [mS]')

    axs[1].plot(statemon.t/ms, g_inh(statemon.t)/mS, c='blue')
    axs[1].set(ylabel='Inh. conductance [mS]')

    for idx, val in enumerate(hiddenstate):
        if val == 1:
            axs[2].axvline(idx*dt, c='lightgray')
    axs[2].plot(statemon.t/ms, statemon.v[0].T/mV, c='black')
    axs[2].set(ylabel='Voltage [mV]', xlabel='Time [ms]')
    plt.show()
    return


def plot_currentclamp(statemon, hiddenstate, dt):
    '''Plots the injected current and voltage trace
    '''
    fig, axs = plt.subplots(2, figsize=(12,12))
    fig.suptitle('Current Clamp')
    axs[0].plot(statemon.t/ms, statemon.I_inj[0]/uA, c='red')
    axs[0].set(ylabel='Input current [uA]')

    for idx, val in enumerate(hiddenstate):
        if val == 1:
            axs[1].axvline(idx*dt, c='lightgray')
    axs[1].plot(statemon.t/ms, statemon.v[0].T/mV, c='black')
    axs[1].set(ylabel='Voltage [mV]', xlabel='Time [ms]')
    plt.show()
    return


def plot_compare(dynamic_statemon, current_statemon, hiddenstate, dt):
    '''Compares the dynamic voltage trace and current voltage trace.
    '''
    fig, axs = plt.subplots(2, figsize=(12,12))
    fig.suptitle('Comparison between Dynamic and Current Clamp', y=0.95)

    for idx, val in enumerate(hiddenstate):
        if val == 1:
            axs[0].axvline(idx*dt, c='lightgray')
    axs[0].title.set_text('Dynamic Clamp')
    axs[0].plot(dynamic_statemon.t/ms, dynamic_statemon.v[0].T/mV, c='black')
    axs[0].set(ylabel='Voltage [mV]', xlabel='Time [ms]')

    for idx, val in enumerate(hiddenstate):
        if val == 1:
            axs[1].axvline(idx*dt, c='lightgray')
    axs[1].title.set_text('Current Clamp')
    axs[1].plot(current_statemon.t/ms, current_statemon.v[0].T/mV, c='black')
    axs[1].set(ylabel='Voltage [mV]', xlabel='Time [ms]')
    plt.show()
    return


def plot_special(axes, array, col=None, label=None):
    x = np.linspace(np.min(array), np.max(array))
    density = stats.gaussian_kde(array)
    axes.plot(x, density(x), color=col, label=label)
    return


def plot_clampcell_MI(MI_data):
    '''docstring
    '''
    # Load Data
    MI_PC_current = [run['MI'] for run in MI_data['PC_current']]
    MI_PC_dynamic = [run['MI'] for run in MI_data['PC_dynamic']]
    MI_IN_current = [run['MI'] for run in MI_data['IN_current']]
    MI_IN_dynamic = [run['MI'] for run in MI_data['IN_dynamic']]

    ## Statistical data
    PC_N = len(MI_PC_current)
    IN_N = len(MI_IN_current)
    current_means = [np.nanmean(MI_PC_current), np.nanmean(MI_IN_current)]
    current_sem = [np.nanstd(MI_PC_current)/PC_N, np.nanstd(MI_IN_current)/IN_N]
    dynamic_means = [np.nanmean(MI_PC_dynamic), np.nanmean(MI_IN_dynamic)]
    dynamic_sem = [np.nanstd(MI_PC_dynamic)/PC_N, np.nanstd(MI_IN_dynamic)/IN_N]

    # Plot
    sns.set_context('talk')
    fig, ax = plt.subplots(figsize=(12, 8))
    x = np.arange(2)
    bar_width = 0.25

    ## Make bars
    b1 = ax.bar(x, height=current_means, label='Current Clamp', yerr=current_sem, capsize=4,
    color='blue', width=bar_width, edgecolor='black')
    b2 = ax.bar(x + bar_width, height=dynamic_means, label='Dynamic Clamp', yerr=dynamic_sem, capsize=4,
    color='green', width=bar_width, edgecolor='black')

    ## Fix x-axis
    ax.set_xticks(x + bar_width/2)
    ax.set_xticklabels(['Pyramidal Cell', 'Interneuron'])

    # Add legend
    plt.legend()

    # Axis styling
    ax.set_ylabel('Mutual Information')
    ax.set_title('Mutual Information in different clamps')
    plt.show()


def plot_regime_compare(pathtofolder):
    #Load
    regimes = ['slow.npy', 'fast.npy', 'slow_high.npy', 'fast_low.npy']
   
    slow = np.load('results/saved/regime_compare/'+regimes[0], allow_pickle=True).item()
    fast = np.load('results/saved/regime_compare/'+regimes[1], allow_pickle=True).item()
    slow_high = np.load('results/saved/regime_compare/'+regimes[2], allow_pickle=True).item()
    fast_low = np.load('results/saved/regime_compare/'+regimes[3], allow_pickle=True).item()

    # Plot
    fig, axs = plt.subplots(ncols=2, figsize=(10, 10))
    plot_special(axs[0], slow['input'], col='blue', label='Slow')
    plot_special(axs[0], fast['input'], col='red', label='Fast')
    plot_special(axs[0], slow_high['input'], col='green', label='Slow High')
    plot_special(axs[0], fast_low['input'], col='purple', label='Fast Low')
    axs[0].set(xlabel='Input Current [nA]')
    axs[0].title.set_text('Input Current distribution')

    plot_special(axs[1], slow['potential'], col='blue', label='Slow')
    plot_special(axs[1], fast['potential'], col='red', label='Fast')
    plot_special(axs[1], slow_high['potential'], col='green', label='Slow High')
    plot_special(axs[1], fast_low['potential'], col='purple', label='Fast Low')
    axs[1].set(xlabel='Membrane Potential [mV]')
    axs[1].title.set_text('Membrane Potential distribution')
    plt.legend()
    plt.show()


def plot_dt_compare(pathorlist):
    ''' If you input list it should be in the order of PC_results, IN_results
    '''
    # Check input
    if isinstance(pathorlist, str):
        PC_results_I = np.load(pathorlist + 'PC_results.npy', allow_pickle=True).item()['I']
        PC_results_Vm = np.load(pathorlist + 'PC_results.npy', allow_pickle=True).item()['Vm']
        IN_results_I = np.load(pathorlist + 'IN_results.npy', allow_pickle=True).item()['I']
        IN_results_Vm = np.load(pathorlist + 'IN_results.npy', allow_pickle=True).item()['Vm']

    elif isinstance(pathorlist, list) or isinstance(pathorlist, np.array):
        PC_results, IN_results = pathorlist
        PC_results_I = PC_results['I']
        PC_results_Vm = PC_results['Vm']
        IN_results_I = IN_results['I']
        IN_results_Vm = IN_results['Vm']
    
    else: 
        raise AssertionError('Input should be a path to the saved .npy files or [PC_results, IN_results].')

    # Get sampling rates
    sampling_array = PC_results_I.keys()

    # Plot the figure
    fig, axs = plt.subplots(nrows=2, ncols=2, figsize=(10, 10))
    for sampling_rate in sampling_array:
        plot_special(axs[0, 0], PC_results_I[sampling_rate], label=sampling_rate)
        plot_special(axs[0, 1], PC_results_Vm[sampling_rate], label=sampling_rate)
        plot_special(axs[1, 0], IN_results_I[sampling_rate], label=sampling_rate)
        plot_special(axs[1, 1], IN_results_Vm[sampling_rate], label=sampling_rate)
    axs[0, 0].set(xlabel='Input Current [nA]')
    axs[0, 0].title.set_text('Pyramidal Cells')
    axs[0, 1].set(xlabel='Membrane Potential [mV]')
    axs[0, 1].title.set_text('Pyramidal Cells')
    axs[1, 0].set(xlabel='Input Current [nA]')
    axs[1, 0].title.set_text('Interneurons')
    axs[1, 1].set(xlabel='Membrane Potential [mV]')
    axs[1, 1].title.set_text('Interneurons')
    plt.legend()
    plt.show()
